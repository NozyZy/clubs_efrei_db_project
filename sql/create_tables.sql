DROP DATABASE IF EXISTS CLUBS_EFREI;
CREATE DATABASE CLUBS_EFREI;
USE CLUBS_EFREI;

DROP TABLE IF EXISTS ETUDIANTS;
DROP TABLE IF EXISTS POSTE;
DROP TABLE IF EXISTS COMMITE;
DROP TABLE IF EXISTS BUDGET;
DROP TABLE IF EXISTS CALENDRIER_ARGENT;
DROP TABLE IF EXISTS TYPES_EVENT;
DROP TABLE IF EXISTS TYPES_CLUB;
DROP TABLE IF EXISTS ETATS_RAPPORTS;
DROP TABLE IF EXISTS CLUBS;
DROP TABLE IF EXISTS EVENEMENTS;
DROP TABLE IF EXISTS TACHES;
DROP TABLE IF EXISTS RAPPORTS;
DROP TABLE IF EXISTS TRAITEMENT;
DROP TABLE IF EXISTS MEMBRES;
DROP TABLE IF EXISTS RESPONSABILITES;
DROP TABLE IF EXISTS ORGANISE;
DROP TABLE IF EXISTS COMPOSE;
DROP TABLE IF EXISTS SIGNE;
DROP TABLE IF EXISTS STATUT;

CREATE TABLE ETUDIANTS
(
    NUM_ETUDIANT   VARCHAR(10),
    NOM_ETUDIANT   CHAR(20)    NOT NULL,
    CLASSE         VARCHAR(20) NOT NULL,
    NIVEAU         VARCHAR(20) NOT NULL,
    GENRE          VARCHAR(10) NOT NULL,
    DATE_NAISSANCE DATE        NOT NULL,
    PRIMARY KEY (NUM_ETUDIANT)
);

CREATE TABLE POSTE
(
    POSTE_ID INT AUTO_INCREMENT,
    TITRE    VARCHAR(25) NOT NULL,
    PRIMARY KEY (POSTE_ID)
);

CREATE TABLE COMMITE
(
    COMITE_ID        INT AUTO_INCREMENT,
    DATE_CREATION    DATE NOT NULL,
    DATE_DISSOLUTION DATE,
    PRIMARY KEY (COMITE_ID)
);

CREATE TABLE BUDGET
(
    BUDGET_ID INT AUTO_INCREMENT,
    MONTANT   DECIMAL NOT NULL,
    PRIMARY KEY (BUDGET_ID)
);

CREATE TABLE CALENDRIER_ARGENT
(
    CALENDRIER_ID  INT AUTO_INCREMENT,
    VARIATION      DECIMAL  NOT NULL,
    AFFECTATION    CHAR(50),
    DATE_VARIATION DATETIME NOT NULL,
    COMITE_ID      INT      NOT NULL,
    BUDGET_ID      INT      NOT NULL,
    PRIMARY KEY (CALENDRIER_ID),
    FOREIGN KEY (COMITE_ID) REFERENCES COMMITE (COMITE_ID),
    FOREIGN KEY (BUDGET_ID) REFERENCES BUDGET (BUDGET_ID)
);

CREATE TABLE TYPES_EVENT
(
    TYPE_ID    INT AUTO_INCREMENT,
    TYPE_EVENT VARCHAR(20) NOT NULL,
    PRIMARY KEY (TYPE_ID),
    UNIQUE (TYPE_EVENT)
);

CREATE TABLE TYPES_CLUB
(
    TYPE_ID   INT AUTO_INCREMENT,
    TYPE_CLUB VARCHAR(20) NOT NULL,
    PRIMARY KEY (TYPE_ID),
    UNIQUE (TYPE_CLUB)
);

CREATE TABLE ETATS_RAPPORTS
(
    ETAT_ID INT AUTO_INCREMENT,
    ETAT    VARCHAR(50) NOT NULL,
    PRIMARY KEY (ETAT_ID),
    UNIQUE (ETAT)
);

CREATE TABLE TYPE_TRAITEMENT
(
    TRAITEMENT_ID INT AUTO_INCREMENT,
    INTITULE      CHAR(50) NOT NULL,
    PRIMARY KEY (TRAITEMENT_ID),
    UNIQUE (INTITULE)
);

CREATE TABLE PROVENANCES
(
    PROVENANCE_ID INT AUTO_INCREMENT,
    INTITULE      CHAR(50) NOT NULL,
    PRIMARY KEY (PROVENANCE_ID),
    UNIQUE (INTITULE)
);


CREATE TABLE CLUBS
(
    CLUB_ID       INT AUTO_INCREMENT,
    NOM_CLUB      VARCHAR(25) NOT NULL,
    DATE_CREATION DATE        NOT NULL,
    DESCRIPTION   VARCHAR(200),
    TYPE_ID       INT         NOT NULL,
    PRIMARY KEY (CLUB_ID),
    UNIQUE (NOM_CLUB),
    FOREIGN KEY (TYPE_ID) REFERENCES TYPES_CLUB (TYPE_ID)
);

CREATE TABLE EVENEMENTS
(
    EVENT_ID   INT AUTO_INCREMENT,
    NOM_EVENT        CHAR(50) NOT NULL,
    DATE_DEBUT DATETIME NOT NULL,
    DATE_FIN   DATETIME NOT NULL,
    TYPE_ID    INT      NOT NULL,
    BUDGET_ID  INT      NOT NULL,
    COMITE_ID  INT,
    PRIMARY KEY (EVENT_ID),
    UNIQUE (BUDGET_ID),
    FOREIGN KEY (TYPE_ID) REFERENCES TYPES_EVENT (TYPE_ID),
    FOREIGN KEY (BUDGET_ID) REFERENCES BUDGET (BUDGET_ID),
    FOREIGN KEY (COMITE_ID) REFERENCES COMMITE (COMITE_ID)
);

CREATE TABLE TACHES
(
    TACHE_ID       INT AUTO_INCREMENT,
    DESCRIPTION    CHAR(200)   NOT NULL,
    CALENDRIER_ID  INT         NOT NULL,
    EVENT_ID       INT         NOT NULL,
    RESPONSABLE_ID VARCHAR(10) NOT NULL,
    PRIMARY KEY (TACHE_ID),
    FOREIGN KEY (CALENDRIER_ID) REFERENCES CALENDRIER_ARGENT (CALENDRIER_ID),
    FOREIGN KEY (EVENT_ID) REFERENCES EVENEMENTS (EVENT_ID),
    FOREIGN KEY (RESPONSABLE_ID) REFERENCES ETUDIANTS (NUM_ETUDIANT)
);


CREATE TABLE RAPPORTS
(
    RAPPORT_ID      INT AUTO_INCREMENT,
    DATE_ECRITURE   DATE,
    DATE_SOUMISSION DATE,
    ETAT_ID         INT NOT NULL,
    CLUB_ID         INT NOT NULL,
    PRIMARY KEY (RAPPORT_ID),
    FOREIGN KEY (ETAT_ID) REFERENCES ETATS_RAPPORTS (ETAT_ID),
    FOREIGN KEY (CLUB_ID) REFERENCES CLUBS (CLUB_ID)
);

CREATE TABLE TRAITEMENT
(
    TRAITEMENT_ID   INT AUTO_INCREMENT,
    OBJET           VARCHAR(200) NOT NULL,
    DATE_TRAITEMENT DATE         NOT NULL,
    PROVENANCE_ID   INT          NOT NULL,
    TYPE_ID         INT          NOT NULL,
    CLUB_ID         INT          NOT NULL,
    PRIMARY KEY (TRAITEMENT_ID),
    FOREIGN KEY (PROVENANCE_ID) REFERENCES PROVENANCES (PROVENANCE_ID),
    FOREIGN KEY (TYPE_ID) REFERENCES TYPE_TRAITEMENT (TRAITEMENT_ID),
    FOREIGN KEY (CLUB_ID) REFERENCES CLUBS (CLUB_ID)
);


CREATE TABLE MEMBRES
(
    CLUB_ID      INT,
    NUM_ETUDIANT VARCHAR(10),
    PRIMARY KEY (CLUB_ID, NUM_ETUDIANT),
    FOREIGN KEY (CLUB_ID) REFERENCES CLUBS (CLUB_ID),
    FOREIGN KEY (NUM_ETUDIANT) REFERENCES ETUDIANTS (NUM_ETUDIANT)
);

CREATE TABLE RESPONSABILITES
(
    CLUB_ID      INT,
    NUM_ETUDIANT VARCHAR(10),
    POSTE_ID     INT,
    DATE_DEBUT   DATE NOT NULL,
    DATE_FIN     DATE NOT NULL,
    PRIMARY KEY (CLUB_ID, NUM_ETUDIANT, POSTE_ID),
    FOREIGN KEY (CLUB_ID) REFERENCES CLUBS (CLUB_ID),
    FOREIGN KEY (NUM_ETUDIANT) REFERENCES ETUDIANTS (NUM_ETUDIANT),
    FOREIGN KEY (POSTE_ID) REFERENCES POSTE (POSTE_ID)
);

CREATE TABLE ORGANISE
(
    CLUB_ID  INT,
    EVENT_ID INT,
    PRIMARY KEY (CLUB_ID, EVENT_ID),
    FOREIGN KEY (CLUB_ID) REFERENCES CLUBS (CLUB_ID),
    FOREIGN KEY (EVENT_ID) REFERENCES EVENEMENTS (EVENT_ID)
);

CREATE TABLE COMPOSE
(
    NUM_ETUDIANT VARCHAR(10),
    POSTE_ID     INT,
    COMITE_ID    INT,
    PRIMARY KEY (NUM_ETUDIANT, POSTE_ID, COMITE_ID),
    FOREIGN KEY (NUM_ETUDIANT) REFERENCES ETUDIANTS (NUM_ETUDIANT),
    FOREIGN KEY (POSTE_ID) REFERENCES POSTE (POSTE_ID),
    FOREIGN KEY (COMITE_ID) REFERENCES COMMITE (COMITE_ID)
);

CREATE TABLE SIGNE
(
    NUM_ETUDIANT   VARCHAR(10),
    RAPPORT_ID     INT,
    DATE_SIGNATURE DATETIME,
    PRIMARY KEY (NUM_ETUDIANT, RAPPORT_ID),
    FOREIGN KEY (NUM_ETUDIANT) REFERENCES ETUDIANTS (NUM_ETUDIANT),
    FOREIGN KEY (RAPPORT_ID) REFERENCES RAPPORTS (RAPPORT_ID)
);
